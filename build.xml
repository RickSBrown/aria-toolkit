<project name="aria-toolkit" basedir="." default="dist">

	<!--<property name="enable.debug" value="true"/>-->
	<property name="aria.rdf.url" value="xml/aria-1.rdf"/>
	<property name="aria.module.name" value="aria"/>
	<property name="aria.validator.module.name" value="aria.validator"/>
	<property name="aria.validator.runner.module.name" value="validation.runner"/>
	<property name="src.dir" location="src"/>
	<property name="build.dir" location="build"/>
	<property name="js.dir.name" value="js"/>
	<property name="js.debug.dir.name" value="js_debug"/>
	<property name="build.js.dir" location="${build.dir}/${js.dir.name}"/>
	<property name="build.js.debug.dir" location="${build.dir}/${js.debug.dir.name}"/>
	<property name="dist.dir" location="dist"/>
	<property name="test.build.dir" location="${build.dir}"/>
	<property name="build.version" value="0.9"/>
	<property name="chrome-ext-dir-name" value="chrome-ext"/>
	<property name="lib.dir" location="${basedir}/libs"/>
	<property name="batik" value="batik-1.7"/>
	<property name="js.src.dir" location="${src.dir}/main/js"/>
	<property name="closure.jar" value="${basedir}/libs/closure-compiler/compiler.jar" />
	<property name="jsdoc.home" location="${build.dir}/jsdoc-master"/>
	<property name="rhino.jar" location="${jsdoc.home}/rhino/js.jar"/>

	<taskdef name="jscomp" classname="com.google.javascript.jscomp.ant.CompileTask" classpath="${basedir}/libs/closure-compiler/compiler.jar"/>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${lib.dir}/ant-contrib/ant-contrib-0.6.jar"/>
		</classpath>
	</taskdef>

	<target name="clean">
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
	</target>

	<target name="init" depends="clean">
		<unzip src="${lib.dir}/jsdoc/jsdoc-master.zip" dest="${build.dir}"/>
		<mkdir dir="${build.js.dir}"/>
		<mkdir dir="${build.js.debug.dir}"/>
		<mkdir dir="${build.dir}/xml"/>
	</target>

	<!--
		This builds all of the individual modules.
	-->
	<target name="buildDebug" depends="init">
		<xslt style="${src.dir}/main/xslt/aria-minifier.xsl" in="${lib.dir}/aria/aria-1.rdf" out="${build.dir}/xml/aria-1.rdf"/>
		<xslt basedir="${src.dir}/main/xml" destdir="${build.dir}/xml" extension=".xml" style="${src.dir}/main/xslt/aria-minifier.xsl"/>
		<copy todir="${build.js.debug.dir}">
			<fileset dir="${js.src.dir}">
				<include name="**/*.js"/>
			</fileset>
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
	</target>

	<!--
		This builds all of the individual modules AND the layer files for both the core aria functionality and the validator.
	-->
	<target name="build" depends="init, buildDebug">
		<property name="r.js" value="${lib.dir}/requirejs/r.js" />
		<optimize moduleName="${aria.module.name}"/>
		<optimize moduleName="${aria.validator.module.name}"/>
		<optimize moduleName="${aria.validator.runner.module.name}"/>
		<path id="js.built.file.list">
			<fileset dir="${build.js.debug.dir}" casesensitive="yes">
				<include name="**/*.js"/>
			</fileset>
		</path>
		<for param="file">
			<path refid="js.built.file.list"/>
			<sequential>
				<compile srcFile="@{file}" destDir="${build.js.dir}"/>
			</sequential>
		</for>
	</target>

	<target name="buildChromeExt" depends="dist, initChromeExt, debugChromeExt, compileChromeExt">
		<svgToIcon res="128" dest="${chromeExtDistDir}/icon/128" src="${src.dir}/main/icon/"/>
		<svgToIcon res="48" dest="${chromeExtDistDir}/icon/48" src="${src.dir}/main/icon/"/>
		<svgToIcon res="16" dest="${chromeExtDistDir}/icon/16" src="${src.dir}/main/icon/"/>
		<zip destfile="${dist.dir}/aria-validator-chrome-${build.version}.zip" basedir="${chromeExtDistDir}"/>
	</target>

	<target name="initChromeExt" depends="build">
		<property name="validator.app.name" value="ARIA Validator"/>
		<property name="chromeExtDistDir" location="${build.dir}/${chrome-ext-dir-name}"/>
		<unzip src="${lib.dir}/batik/${batik}.zip" dest="${build.dir}"/>
		<mkdir dir="${chromeExtDistDir}"/>
		<copy todir="${chromeExtDistDir}">
			<fileset dir="${build.dir}">
				<exclude name="${batik}/**"/>
				<!--<exclude name="${js.debug.dir.name}/**"/>-->
				<include name="xml/*.*"/>
				<include name="${js.dir.name}/${aria.validator.runner.module.name}-layer.js"/>
			</fileset>
		</copy>
		<copy todir="${chromeExtDistDir}">
			<fileset dir="${src.dir}/main/${chrome-ext-dir-name}">
				<exclude name="${batik}/**"/>
				<exclude name="*.js"/>
				<exclude name="**/*.png"/>
				<include name="**/*"/>
			</fileset>
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
<!--		<copy todir="${chromeExtDistDir}">
			<fileset dir="${src.dir}/main/${chrome-ext-dir-name}">
				<include name="**/*.png"/>
			</fileset>
		</copy>-->
	</target>

	<target name="debugChromeExt" if="enable.debug">
		<copy todir="${chromeExtDistDir}">
			<fileset dir="${src.dir}/main/${chrome-ext-dir-name}">
				<include name="*.js"/>
			</fileset>
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
		<echo>DEBUG MODE IS ON!!! DO NOT DISTRIBUTE THIS BUILD!</echo>
	</target>

	<target name="compileChromeExt" unless="enable.debug">
		<for param="file">
			<path>
				<fileset dir="${src.dir}/main/${chrome-ext-dir-name}">
					<include name="*.js"/>
				</fileset>
			</path>
			<sequential>
				<compile srcFile="@{file}" destDir="${chromeExtDistDir}"/>
			</sequential>
		</for>
	</target>

	<target name="test" depends="dist" description="Builds the unit tests">
		<mkdir dir="${test.build.dir}"/>
		<if>
			<isset property="enable.debug"/>
			<then>
				<property name="js.test.dir" value="${js.debug.dir.name}"/>
			</then>
		</if>
		<property name="js.test.dir" value="${js.dir.name}"/>
		<unzip src="${lib.dir}/jasmine/jasmine-standalone-2.0.0.zip" dest="${test.build.dir}">
			<patternset>
				<include name="lib/"/>
			</patternset>
		</unzip>
		<copy todir="${test.build.dir}">
			<fileset dir="${src.dir}/test">
				<include name="**/*"/>
			</fileset>
			<filterchain>
				<expandproperties/>
			</filterchain>
		</copy>
		<echo></echo>
		<echo>************************************************************************</echo>
		<echo>*                                                                      *</echo>
		<echo>* Load 'SpecRunner.html' in your browser to run the tests.             *</echo>
		<echo>*                                                                      *</echo>
		<echo>************************************************************************</echo>
	</target>

	<target name="dist" depends="build, buildDoco" description="Builds the distribution files to the dist dir">
		<mkdir dir="${dist.dir}"/>
		<pathconvert property="js.built.filenames">
			<map from="${build.js.debug.dir}/" to="&#10;"/>
			<path refid="js.built.file.list"/>
		</pathconvert>
		<copy todir="${build.dir}"><!-- Copy to build so it is bundled in the archive -->
			<fileset dir="${basedir}">
				<include name="LICENSE"/>
			</fileset>
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
		<copy todir="${build.dir}"><!-- Copy to build so it is bundled in the archive -->
			<fileset dir="${src.dir}/main">
				<include name="README"/>
			</fileset>
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
		<copy todir="${basedir}"><!-- So people find the built version -->
			<fileset dir="${src.dir}/main">
				<include name="README"/>
			</fileset>
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
		<zip destfile="${dist.dir}/aria-toolkit-${build.version}.zip" basedir="${build.dir}" includes="*, ${js.dir.name}/**, ${js.debug.dir.name}/**, xml/**, docs/**" excludes="jsdoc-master/**"/>
	</target>

	<target name="buildDoco">
		<delete dir="${build.dir}/docs"/>
		<!--
		jsdoc.home - the location of your jsdoc3 installation
		jsdoc3-task-jar - the location of the task jar that was build above
		rhino.jar - the location of the rhino jar
		-->
		<unzip src="${lib.dir}/jsdoc/jsdoc-master.zip" dest="${build.dir}"/>
		<property name="jsdoc.home" location="${build.dir}/jsdoc-master"/>
		<property name="jsdoc3-task-jar" location="${lib.dir}/jsdoc/jsdoc3-ant-task-1.0.jar"/>
		<chmod file="${jsdoc.home}/jsdoc" perm="ugo+rx"/>
		<exec executable="${jsdoc.home}/jsdoc" failonerror="true">
			<arg value="${js.src.dir}"/>
			<arg value="-d"/>
			<arg value="${build.dir}/docs"/>
			<arg value="--verbose"/>
		</exec>

		<!--<property name="rhino.jar" location="${lib.dir}/jsdoc/js-1.7r3_jsdoc.jar"/>-->
<!--		<taskdef name="jsdoc" classname="net.jannon.ant.tasks.JsDoc3" classpath="${jsdoc3-task-jar}:${rhino.jar}"/>
		<jsdoc jsdochome="${jsdoc.home}" to="${build.dir}/docs" >
			<fileset dir="${js.src.dir}/"/>
		</jsdoc>-->
		<!--<jsdoc jsdochome="${jsdoc.home}" to="${build.dir}/docs" file="${js.src.dir}/aria.js" />-->
	</target>

	<macrodef name="svgToIcon">
		<attribute name="batik.dir" default="${build.dir}/${batik}"/>
		<attribute name="src"/>
		<attribute name="dest"/>
		<attribute name="res"/>
		<sequential>
			<java jar="@{batik.dir}/batik-rasterizer.jar" dir="@{batik.dir}" fork="true" failonerror="true" maxmemory="256m">
				<arg value="-d"/>
				<arg value="@{dest}"/>
				<arg value="-m"/>
				<arg value="image/png"/>
				<arg value="-w"/>
				<arg value="@{res}"/>
				<arg value="-h"/>
				<arg value="@{res}"/>
				<arg value="-scriptSecurityOff"/>
				<arg value="@{src}"/>
			</java>
		</sequential>
	</macrodef>

	<macrodef name="compile">
		<attribute name="srcFile"/>
		<attribute name="destDir"/>
		<sequential>
			<local name="fileName"/>
			<local name="srcDir"/>
			<basename property="fileName" file="@{srcFile}"/>
			<dirname property="srcDir" file="@{srcFile}"/>
			<echo>Compiling:${srcDir}/${fileName} TO @{destDir}/${fileName}</echo>
			<jscomp compilationLevel="simple" debug="false" output="@{destDir}/${fileName}">
				<sources dir="${srcDir}">
					<file name="${fileName}"/>
				</sources>
			</jscomp>
		</sequential>
	</macrodef>

	<macrodef name="optimize">
		<attribute name="moduleName"/>
		<sequential>
			<local name="module.name"/>
			<local name="layer.name.js"/>
			<property name="module.name" value="@{moduleName}"/>
			<property name="layer.name.js" value="@{moduleName}-layer.js"/>
			<copy file="${basedir}/build.js" tofile="${basedir}/build.@{moduleName}.js">
				<filterchain>
					<expandproperties/>
				</filterchain>
			</copy>
			<java classname="org.mozilla.javascript.tools.shell.Main" failonerror="true">
				<classpath>
					<pathelement location="${rhino.jar}" />
					<pathelement location="${closure.jar}" />
				</classpath>
				<arg value="${r.js}"/>
				<arg value="-o"/>
				<arg value="${basedir}/build.@{moduleName}.js"/>
			</java>
			<delete file="${basedir}/build.@{moduleName}.js"/>
		</sequential>
	</macrodef>
</project>
