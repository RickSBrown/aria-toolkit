ARIA Toolkit

Rick Brown
ricksbrown73@gmail.com


ARIA Toolkit provides: 

- A high performance, light, adaptable javascript library that "knows" about ARIA.
Other javascript libraries/frameworks may consume this functionality.

- An ARIA validator which allows you to check that your ARIA roles and attributes have been correctly implemented.

The ARIA knowledge is provided by the ARIA taxonomy in rdf format found here: 
http://www.w3.org/TR/wai-aria/appendices#a_schemata
This means that if the taxonomy changes the code will automatically adapt to the changes simply by using 
the new version of the rdf file.

For performance reasons it is recommended that:
1. You ensure the rdf file is cached.
2. You turn on http compression (this will have a huge impact on the rdf file).


Files you will find in the tarball:

aria-${build.version}.js (uncompressed version is: aria-[version-number]-debug.js)
************************

aria.js Is the core library that drives everything else. By default it adds one global property "ARIA".
Simply load it like any other script, for example:

<script type="text/javascript" src="js/aria-${build.version}.js"></script>

window.ARIA provides the following public methods:

ARIA.getScope
ARIA.getMustContain
ARIA.getSupported

These are documented in the unminified version of the file.

aria-1.rdf
************************
The js libraries have an external dependency: the ARIA taxonomy (currently aria-1.rdf) found here: 
http://www.w3.org/WAI/ARIA/schemata/aria-1.rdf

A stripped down version of this file (for bandwidth reasons) is included but you can use your own copy if you prefer.
The js code looks for this file at the relative url "xml/aria-1.rdf". You can change this by hand or by building the project and 
overriding the ANT property "aria.rdf.url".

aria.validator-${build.version}.js (uncompressed version is: aria.validator-[version-number]-debug.js)
************************
This file adds extra functionality for validating ARIA in the DOM (and therefore must be loaded after aria.js).
It does this by adding an extra public method to window.ARIA:

ARIA.isValid

This is documented in the unminified version of the file.

All you need to do is load the script after the main aria.js script.
